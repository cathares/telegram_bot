from aiogram import Router, types, F
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    Message,
    InlineKeyboardButton,
    CallbackQuery
)

from config import STATUS_LIST, my_orders_text_template
from db.database import db

import emoji

from states import Form

router = Router()


@router.callback_query(F.data == "toOrderList")
async def my_orders_callback_handler(callback: CallbackQuery, state: FSMContext) -> None:
    await state.set_state(Form.orderList)
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text=emoji.emojize("–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"),
            callback_data='accepted'
        ),
        InlineKeyboardButton(
            text=emoji.emojize("–í –ø—É—Ç–∏"),
            callback_data='delievering'
        )
    )
    builder.row(
        InlineKeyboardButton(
            text=emoji.emojize("–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"),
            callback_data='delievered'
        ),
        InlineKeyboardButton(
            text=emoji.emojize("‚¨Ö–ù–∞–∑–∞–¥"),
            callback_data="toStart"
        )
    )
    await callback.message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.message(Command("my_orders"))
async def my_orders_handler(message: Message, state: FSMContext) -> None:
    await state.set_state(Form.orderList)
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text=emoji.emojize(emoji.emojize("–í –æ–±—Ä–∞–±–æ—Ç–∫–µ")),
            callback_data='accepted'
        ),
        InlineKeyboardButton(
            text=emoji.emojize(emoji.emojize("–í –ø—É—Ç–∏")),
            callback_data='delievering'
        )
    )
    builder.row(
        InlineKeyboardButton(
            text=emoji.emojize("–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"),
            callback_data='delieverd'
        ),
        InlineKeyboardButton(
            text=emoji.emojize("‚¨Ö–ù–∞–∑–∞–¥"),
            callback_data="toStart"
        )
    )
    await message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞",
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data.in_({'delievered', 'delievering', 'accepted'}))
async def orderlist_callback(callback: CallbackQuery, state: FSMContext) -> None:
    await state.set_state(Form.orderList)
    cur = db.cursor()
    data = cur.execute(
        f"SELECT * FROM orders WHERE user_id == {callback.from_user.id} AND status == '{callback.data}' ").fetchall()
    cur.close()
    print(type(data))
    print(data)
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text=emoji.emojize("‚¨Ö–ù–∞–∑–∞–¥"),
            callback_data="toOrderList"
        )
    )
    if not data:
        await callback.message.answer(
            text="–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç",
            reply_markup=builder.as_markup()
        )
    else:
        await callback.message.answer(
            text="<b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã\n\n</b>" + '\n'.join(emoji.emojize(f"<b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {data[i][0]}</b>"
                                                                    f"\nüõí–ê—Ä—Ç–∏–∫—É–ª: {data[i][3]} "
                                                                    f"\nüìê–†–∞–∑–º–µ—Ä:"f" {data[i][4]}"
                                                                    f"\nüë•–§–ò–û:"f" {data[i][5]}"
                                                                    f"\n‚òé–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data[i][6]}"
                                                                    f"\nüöõ–ê–¥—Ä–µ—Å –°–î–ï–ö–∞: {data[i][7]}"
                                                                    f"\nüè∑–ü—Ä–æ–º–æ–∫–æ–¥: {data[i][8] if data[i][8] is not None else ''}"
                                                                    f"\nüïê–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {STATUS_LIST[data[i][9]]}\n")
                                                      for i in
                                                      range(0, len(data))),
            parse_mode='HTML',
            reply_markup=builder.as_markup()
        )
    await callback.answer()

