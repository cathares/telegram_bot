from aiogram import Router, types, F
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command, StateFilter, Filter
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    Message,
    InlineKeyboardButton, CallbackQuery,
)
import emoji

from config import admin_ids, STATUS_LIST
from db.database import db
from states import Form

router = Router()


class Newsletter(StatesGroup):
    message = State()


class AdminFilter(Filter):
    async def __call__(self, message: Message):
        cur = db.cursor()
        print(cur.execute("SELECT admin_id FROM admins").fetchall())
        return message.from_user.id in admin_ids


@router.callback_query(AdminFilter(), F.data == "admin")
async def admin_panel(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="–†–∞—Å—Å—ã–ª–∫–∞",
            callback_data="ToNewsletter"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="–ú–æ–∏ –∑–∞–∫–∞–∑—ã",
            callback_data="admin_toOrders"
        )
    )
    await callback.message.answer(
        '–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(AdminFilter(), F.data == "ToNewsletter")
async def newsletter(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Newsletter.message)
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
    await callback.answer()


@router.message(AdminFilter(), Newsletter.message)
async def send_newsletter(message: Message, state: FSMContext):
    await message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞...")
    cur = db.cursor()
    users = cur.execute("SELECT user_id from users").fetchall()
    for user in users:
        print(user)
        try:
            await message.send_copy(chat_id=user[0])
        except:
            pass
    await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.')
    await state.clear()


@router.callback_query(AdminFilter(), F.data.startswith("admin_order_"))
async def accept_order(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(
            text=emoji.emojize(":check_mark_button:–ó–∞–∫–∞–∑ –≤–∑—è—Ç"),
            callback_data="NULL"
        )
    )
    order_id = callback.data[12:]
    cur = db.cursor()
    print(callback.data[12:])
    print(cur.execute("SELECT worker FROM orders WHERE order_id=={id}".format(id=order_id)).fetchone())
    if cur.execute("SELECT worker FROM orders WHERE order_id=={id}".format(id=order_id)).fetchone()[0] is None:
        cur.execute(
            "UPDATE orders SET worker={worker} WHERE order_id=={id}".format(worker=callback.from_user.id, id=order_id))
        await callback.message.answer(f"–ó–∞–∫–∞–∑ {order_id} –≤–∑—è—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.first_name}")
        await callback.message.edit_reply_markup(
            reply_markup=builder.as_markup()
        )
        db.commit()
    else:
        pass
    await callback.answer()


@router.callback_query(AdminFilter(), F.data == "NULL")
async def skip_update(callback: CallbackQuery):
    await callback.answer()


@router.callback_query(AdminFilter(), F.data == "admin_toOrders")
async def admin_orders(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="–ó–∞–∫–∞–∑—ã –≤ —Ä–∞–±–æ—Ç–µ",
            callback_data="OrdersInWork"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã",
            callback_data="FinishedOrders"
        ),
    )
    builder.row(
        InlineKeyboardButton(
            text="–ù–∞–∑–∞–¥",
            callback_data="admin"
        )
    )
    await callback.message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(AdminFilter(), F.data == "OrdersInWork")
async def ordersInWork(callback: CallbackQuery):
    cur = db.cursor()
    orders = cur.execute("SELECT * FROM orders WHERE worker == {worker} AND status != 'delievered'".format(
        worker=callback.from_user.id)).fetchall()
    for i in range(0, len(orders)):
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(
                text="–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞",
                callback_data=f"ChangeStatus_{orders[i][0]}"
            )
        )
        await callback.message.answer(
            text=emoji.emojize(
                f"\n–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {orders[i][0]}\n"
                f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {orders[i][2]}"
                f"\nüõí–ê—Ä—Ç–∏–∫—É–ª: {orders[i][3]} "
                f"\nüìê–†–∞–∑–º–µ—Ä:"f" {orders[i][4]}"
                f"\nüë•–§–ò–û:"f" {orders[i][5]}"
                f"\n‚òé–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {orders[i][6]}"
                f"\nüöõ–ê–¥—Ä–µ—Å –°–î–ï–ö–∞: {orders[i][7]}"
                f"\nüè∑–ü—Ä–æ–º–æ–∫–æ–¥: {orders[i][8]}"
                f"\nüïê–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {STATUS_LIST[orders[i][9]]}"
            ),
            reply_markup=builder.as_markup()
        )
    await callback.answer()


@router.callback_query(AdminFilter(), F.data.startswith("ChangeStatus"))
async def changeStatusMenu(callback: CallbackQuery):
    id = callback.data[13:]
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="–í –æ–±—Ä–∞–±–æ—Ç–∫–µ",
            callback_data=f"status_accepted_{id}"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="–í –ø—É—Ç–∏",
            callback_data=f"status_delievering_{id}"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="–î–æ—Å—Ç–∞–≤–ª–µ–Ω",
            callback_data=f"status_delievered_{id}"
        )
    )
    await callback.message.answer(
        text=f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞–∫–∞–∑–∞ {id}",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

''' –ü–û–ß–ò–ù–ò–¢–¨ –ö–û–°–¢–´–õ–¨ –ù–ï –ó–ê–ë–£–î–¨'''


@router.callback_query(AdminFilter(), F.data.startswith("status"))
async def change_status(callback: CallbackQuery):
    order_id = callback.data[-2:]
    status = callback.data[7:-3]
    cur = db.cursor()
    cur.execute(f"UPDATE orders SET status='{status}' WHERE order_id =='{order_id}'")
    cur.close()
    await callback.message.edit_text(
        text=f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ <b>{STATUS_LIST[status]}</b>",
        parse_mode="HTML"
    )


@router.callback_query(AdminFilter(), F.data == "OrdersInWork")
async def ordersInWork(callback: CallbackQuery):
    cur = db.cursor()
    orders = cur.execute("SELECT * FROM orders WHERE worker == {worker} AND status == 'delievered'".format(
        worker=callback.from_user.id)).fetchall()
    builder = InlineKeyboardBuilder()
    for i in range(0, len(orders)):
        await callback.message.answer(
            text=emoji.emojize(
                f"\n–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {orders[i][0]}\n"
                f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {orders[i][2]}"
                f"\nüõí–ê—Ä—Ç–∏–∫—É–ª: {orders[i][3]} "
                f"\nüìê–†–∞–∑–º–µ—Ä:"f" {orders[i][4]}"
                f"\nüë•–§–ò–û:"f" {orders[i][5]}"
                f"\n‚òé–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {orders[i][6]}"
                f"\nüöõ–ê–¥—Ä–µ—Å –°–î–ï–ö–∞: {orders[i][7]}"
                f"\nüè∑–ü—Ä–æ–º–æ–∫–æ–¥: {orders[i][8]}"
                f"\nüïê–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {STATUS_LIST[orders[i][9]]}"
            ),
            reply_markup=builder.as_markup()
        )
